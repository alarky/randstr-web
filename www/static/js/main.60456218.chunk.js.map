{"version":3,"sources":["index.tsx","charactors.ts"],"names":["App","props","state","howmany","length","useLowers","useUppers","useDigits","useSymbols","useExclamationMark","useDoubleQuotationMark","useNumberSign","useDollarSign","usePercentSign","useAmpersandSign","useApostrophe","useLeftParenthesis","useRightParenthesis","useAsterisk","usePlusSign","useComma","useMinusSign","usePeriod","useSlash","useColon","useSemicolon","useLessThanSign","useEqualSign","useGreaterThanSign","useQuestionMark","useCommercialAtSign","useLeftSquareBracket","useBackslash","useRightSquareBracket","useSpacingCircumflexAccent","useSpacingUnderscore","useSpacingGraveAccent","useLeftBrace","useVerticalBar","useRightBrace","useTildeAccent","randstrs","this","generate","c","strs","i","ints","Uint32Array","window","crypto","getRandomValues","r","j","push","setState","checked","value","onChange","e","changeHandler","parseInt","target","type","changeMarksHandler","changeMarkHandler","map","randstr","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60456218.chunk.js","sourcesContent":["import React, {ChangeEvent, ReactNode} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as charactors from \"./charactors\";\n\ninterface IAppProps {\n}\n\ninterface IAppState {\n    howmany: number;\n    length: number;\n\n    useLowers: boolean;\n    useUppers: boolean;\n    useDigits: boolean;\n    useSymbols: boolean;\n    useExclamationMark: boolean;\n    useDoubleQuotationMark: boolean;\n    useNumberSign: boolean;\n    useDollarSign: boolean;\n    usePercentSign: boolean;\n    useAmpersandSign: boolean;\n    useApostrophe: boolean;\n    useLeftParenthesis: boolean;\n    useRightParenthesis: boolean;\n    useAsterisk: boolean;\n    usePlusSign: boolean;\n    useComma: boolean;\n    useMinusSign: boolean;\n    usePeriod: boolean;\n    useSlash: boolean;\n    useColon: boolean;\n    useSemicolon: boolean;\n    useLessThanSign: boolean;\n    useEqualSign: boolean;\n    useGreaterThanSign: boolean;\n    useQuestionMark: boolean;\n    useCommercialAtSign: boolean;\n    useLeftSquareBracket: boolean;\n    useBackslash: boolean;\n    useRightSquareBracket: boolean;\n    useSpacingCircumflexAccent: boolean;\n    useSpacingUnderscore: boolean;\n    useSpacingGraveAccent: boolean;\n    useLeftBrace: boolean;\n    useVerticalBar: boolean;\n    useRightBrace: boolean;\n    useTildeAccent: boolean;\n\n    randstrs: string[]\n}\n\nclass App extends React.Component<IAppProps, IAppState> {\n    constructor(props: IAppProps) {\n        super(props);\n\n        this.state = {\n            howmany: 12,\n            length: 16,\n            useLowers: true,\n            useUppers: true,\n            useDigits: true,\n            useSymbols: false,\n            useExclamationMark: false,\n            useDoubleQuotationMark: false,\n            useNumberSign: false,\n            useDollarSign: false,\n            usePercentSign: false,\n            useAmpersandSign: false,\n            useApostrophe: false,\n            useLeftParenthesis: false,\n            useRightParenthesis: false,\n            useAsterisk: false,\n            usePlusSign: false,\n            useComma: false,\n            useMinusSign: false,\n            usePeriod: false,\n            useSlash: false,\n            useColon: false,\n            useSemicolon: false,\n            useLessThanSign: false,\n            useEqualSign: false,\n            useGreaterThanSign: false,\n            useQuestionMark: false,\n            useCommercialAtSign: false,\n            useLeftSquareBracket: false,\n            useBackslash: false,\n            useRightSquareBracket: false,\n            useSpacingCircumflexAccent: false,\n            useSpacingUnderscore: false,\n            useSpacingGraveAccent: false,\n            useLeftBrace: false,\n            useVerticalBar: false,\n            useRightBrace: false,\n            useTildeAccent: false,\n\n            randstrs: [],\n        };\n    }\n\n    componentWillMount() {\n        this.generate();\n    }\n\n    generate() {\n        let c = '';\n        if (this.state.useLowers) {\n            c += charactors.LOWERS;\n        }\n        if (this.state.useUppers) {\n            c += charactors.UPPERS;\n        }\n        if (this.state.useDigits) {\n            c += charactors.DIGITS;\n        }\n\n        if (this.state.useExclamationMark) {\n            c += charactors.EXCLAMATION_MARK;\n        }\n        if (this.state.useDoubleQuotationMark) {\n            c += charactors.DOUBLE_QUOTATION_MARK;\n        }\n        if (this.state.useNumberSign) {\n            c += charactors.NUMBER_SIGN;\n        }\n        if (this.state.useDollarSign) {\n            c += charactors.DOLLAR_SIGN;\n        }\n        if (this.state.usePercentSign) {\n            c += charactors.PERCENT_SIGN;\n        }\n        if (this.state.useAmpersandSign) {\n            c += charactors.AMPERSAND_SIGN;\n        }\n        if (this.state.useApostrophe) {\n            c += charactors.APOSTROPHE;\n        }\n        if (this.state.useLeftParenthesis) {\n            c += charactors.LEFT_PARENTHESIS;\n        }\n        if (this.state.useRightParenthesis) {\n            c += charactors.RIGHT_PARENTHESIS;\n        }\n        if (this.state.useAsterisk) {\n            c += charactors.ASTERISK;\n        }\n        if (this.state.usePlusSign) {\n            c += charactors.PLUS_SIGN;\n        }\n        if (this.state.useComma) {\n            c += charactors.COMMA;\n        }\n        if (this.state.useMinusSign) {\n            c += charactors.MINUS_SIGN;\n        }\n        if (this.state.usePeriod) {\n            c += charactors.PERIOD;\n        }\n        if (this.state.useSlash) {\n            c += charactors.SLASH;\n        }\n        if (this.state.useColon) {\n            c += charactors.COLON;\n        }\n        if (this.state.useSemicolon) {\n            c += charactors.SEMICOLON;\n        }\n        if (this.state.useLessThanSign) {\n            c += charactors.LESS_THAN_SIGN;\n        }\n        if (this.state.useEqualSign) {\n            c += charactors.EQUAL_SIGN;\n        }\n        if (this.state.useGreaterThanSign) {\n            c += charactors.GREATER_THAN_SIGN;\n        }\n        if (this.state.useQuestionMark) {\n            c += charactors.QUESTION_MARK;\n        }\n        if (this.state.useCommercialAtSign) {\n            c += charactors.COMMERCIAL_AT_SIGN;\n        }\n        if (this.state.useLeftSquareBracket) {\n            c += charactors.LEFT_SQUARE_BRACKET;\n        }\n        if (this.state.useBackslash) {\n            c += charactors.BACKSLASH;\n        }\n        if (this.state.useRightSquareBracket) {\n            c += charactors.RIGHT_SQUARE_BRACKET;\n        }\n        if (this.state.useSpacingCircumflexAccent) {\n            c += charactors.SPACING_CIRCUMFLEX_ACCENT;\n        }\n        if (this.state.useSpacingUnderscore) {\n            c += charactors.SPACING_UNDERSCORE;\n        }\n        if (this.state.useSpacingGraveAccent) {\n            c += charactors.SPACING_GRAVE_ACCENT;\n        }\n        if (this.state.useLeftBrace) {\n            c += charactors.LEFT_BRACE;\n        }\n        if (this.state.useVerticalBar) {\n            c += charactors.VERTICAL_BAR;\n        }\n        if (this.state.useRightBrace) {\n            c += charactors.RIGHT_BRACE;\n        }\n        if (this.state.useTildeAccent) {\n            c += charactors.TILDE_ACCENT;\n        }\n\n        if (!c.length) {\n            return;\n        }\n\n        let strs: string[] = [];\n        for (let i = 0; i < this.state.howmany; i++) {\n            let ints = new Uint32Array(this.state.length);\n            window.crypto.getRandomValues(ints);\n\n            let r = '';\n            for (let j = 0; j < this.state.length; j++) {\n                r += c[ints[j] % c.length];\n            }\n            strs.push(r);\n        }\n\n        this.setState({randstrs: strs});\n    }\n\n    changeHandler(state: object) {\n        this.setState(state, () => this.generate());\n    }\n\n    changeMarksHandler(checked: boolean) {\n        this.setState({\n            useSymbols: checked,\n            useExclamationMark: checked,\n            useDoubleQuotationMark: checked,\n            useNumberSign: checked,\n            useDollarSign: checked,\n            usePercentSign: checked,\n            useAmpersandSign: checked,\n            useApostrophe: checked,\n            useLeftParenthesis: checked,\n            useRightParenthesis: checked,\n            useAsterisk: checked,\n            usePlusSign: checked,\n            useComma: checked,\n            useMinusSign: checked,\n            usePeriod: checked,\n            useSlash: checked,\n            useColon: checked,\n            useSemicolon: checked,\n            useLessThanSign: checked,\n            useEqualSign: checked,\n            useGreaterThanSign: checked,\n            useQuestionMark: checked,\n            useCommercialAtSign: checked,\n            useLeftSquareBracket: checked,\n            useBackslash: checked,\n            useRightSquareBracket: checked,\n            useSpacingCircumflexAccent: checked,\n            useSpacingUnderscore: checked,\n            useSpacingGraveAccent: checked,\n            useLeftBrace: checked,\n            useVerticalBar: checked,\n            useRightBrace: checked,\n            useTildeAccent: checked,\n        }, () => {\n            this.generate();\n        })\n    }\n\n    changeMarkHandler(state: object) {\n        this.setState(state, () => {\n            if (\n                this.state.useExclamationMark === this.state.useDoubleQuotationMark &&\n                this.state.useExclamationMark === this.state.useNumberSign &&\n                this.state.useExclamationMark === this.state.useDollarSign &&\n                this.state.useExclamationMark === this.state.usePercentSign &&\n                this.state.useExclamationMark === this.state.useAmpersandSign &&\n                this.state.useExclamationMark === this.state.useApostrophe &&\n                this.state.useExclamationMark === this.state.useLeftParenthesis &&\n                this.state.useExclamationMark === this.state.useRightParenthesis &&\n                this.state.useExclamationMark === this.state.useAsterisk &&\n                this.state.useExclamationMark === this.state.usePlusSign &&\n                this.state.useExclamationMark === this.state.useComma &&\n                this.state.useExclamationMark === this.state.useMinusSign &&\n                this.state.useExclamationMark === this.state.usePeriod &&\n                this.state.useExclamationMark === this.state.useSlash &&\n                this.state.useExclamationMark === this.state.useColon &&\n                this.state.useExclamationMark === this.state.useSemicolon &&\n                this.state.useExclamationMark === this.state.useLessThanSign &&\n                this.state.useExclamationMark === this.state.useEqualSign &&\n                this.state.useExclamationMark === this.state.useGreaterThanSign &&\n                this.state.useExclamationMark === this.state.useQuestionMark &&\n                this.state.useExclamationMark === this.state.useCommercialAtSign &&\n                this.state.useExclamationMark === this.state.useLeftSquareBracket &&\n                this.state.useExclamationMark === this.state.useBackslash &&\n                this.state.useExclamationMark === this.state.useRightSquareBracket &&\n                this.state.useExclamationMark === this.state.useSpacingCircumflexAccent &&\n                this.state.useExclamationMark === this.state.useSpacingUnderscore &&\n                this.state.useExclamationMark === this.state.useSpacingGraveAccent &&\n                this.state.useExclamationMark === this.state.useLeftBrace &&\n                this.state.useExclamationMark === this.state.useVerticalBar &&\n                this.state.useExclamationMark === this.state.useRightBrace &&\n                this.state.useExclamationMark === this.state.useTildeAccent) {\n\n                this.setState({useSymbols: this.state.useExclamationMark}, () => this.generate());\n            } else {\n                this.generate();\n            }\n        });\n    }\n\n    render(): ReactNode {\n        return (\n            <section>\n                <h1>Random Strings</h1>\n                <div>\n                    length:<input value={this.state.length}\n                           onChange={(e) => this.changeHandler({length: parseInt(e.target.value) || 0})} />\n                    x<input value={this.state.howmany}\n                            onChange={(e) => this.changeHandler({howmany: parseInt(e.target.value) || 0})}/>\n                </div>\n                <div>\n                    <input type=\"checkbox\"\n                           checked={this.state.useLowers}\n                           onChange={(e) => this.changeHandler({useLowers: e.target.checked})}\n                    />a-z\n                    <input type=\"checkbox\"\n                           checked={this.state.useUppers}\n                           onChange={(e) => this.changeHandler({useUppers: e.target.checked})}\n                    />A-Z\n                    <input type=\"checkbox\"\n                           checked={this.state.useDigits}\n                           onChange={(e) => this.changeHandler({useDigits: e.target.checked})}\n                    />0-9\n                    <input type=\"checkbox\"\n                           checked={this.state.useSymbols}\n                           onChange={(e) => this.changeMarksHandler(e.target.checked)}\n                    />symbols\n                </div>\n                <div>\n                    <input type=\"checkbox\"\n                           checked={this.state.useExclamationMark}\n                           onChange={(e) => this.changeMarkHandler({useExclamationMark: e.target.checked})}\n                    />{charactors.EXCLAMATION_MARK}\n                    <input type=\"checkbox\"\n                           checked={this.state.useDoubleQuotationMark}\n                           onChange={(e) => this.changeMarkHandler({useDoubleQuotationMark: e.target.checked})}\n                    />{charactors.DOUBLE_QUOTATION_MARK}\n                    <input type=\"checkbox\"\n                           checked={this.state.useNumberSign}\n                           onChange={(e) => this.changeMarkHandler({useNumberSign: e.target.checked})}\n                    />{charactors.NUMBER_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useDollarSign}\n                           onChange={(e) => this.changeMarkHandler({useDollarSign: e.target.checked})}\n                    />{charactors.DOLLAR_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.usePercentSign}\n                           onChange={(e) => this.changeMarkHandler({usePercentSign: e.target.checked})}\n                    />{charactors.PERCENT_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useAmpersandSign}\n                           onChange={(e) => this.changeMarkHandler({useAmpersandSign: e.target.checked})}\n                    />{charactors.AMPERSAND_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useApostrophe}\n                           onChange={(e) => this.changeMarkHandler({useApostrophe: e.target.checked})}\n                    />{charactors.APOSTROPHE}\n                    <input type=\"checkbox\"\n                           checked={this.state.useLeftParenthesis}\n                           onChange={(e) => this.changeMarkHandler({useLeftParenthesis: e.target.checked})}\n                    />{charactors.LEFT_PARENTHESIS}\n                    <input type=\"checkbox\"\n                           checked={this.state.useRightParenthesis}\n                           onChange={(e) => this.changeMarkHandler({useRightParenthesis: e.target.checked})}\n                    />{charactors.RIGHT_PARENTHESIS}\n                    <input type=\"checkbox\"\n                           checked={this.state.useAsterisk}\n                           onChange={(e) => this.changeMarkHandler({useAsterisk: e.target.checked})}\n                    />{charactors.ASTERISK}\n                    <input type=\"checkbox\"\n                           checked={this.state.usePlusSign}\n                           onChange={(e) => this.changeMarkHandler({usePlusSign: e.target.checked})}\n                    />{charactors.PLUS_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useComma}\n                           onChange={(e) => this.changeMarkHandler({useComma: e.target.checked})}\n                    />{charactors.COMMA}\n                    <input type=\"checkbox\"\n                           checked={this.state.useMinusSign}\n                           onChange={(e) => this.changeMarkHandler({useMinusSign: e.target.checked})}\n                    />{charactors.MINUS_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.usePeriod}\n                           onChange={(e) => this.changeMarkHandler({usePeriod: e.target.checked})}\n                    />{charactors.PERIOD}\n                    <input type=\"checkbox\"\n                           checked={this.state.useSlash}\n                           onChange={(e) => this.changeMarkHandler({useSlash: e.target.checked})}\n                    />{charactors.SLASH}\n                </div>\n                <div>\n                    <input type=\"checkbox\"\n                           checked={this.state.useColon}\n                           onChange={(e) => this.changeMarkHandler({useColon: e.target.checked})}\n                    />{charactors.COLON}\n                    <input type=\"checkbox\"\n                           checked={this.state.useSemicolon}\n                           onChange={(e) => this.changeMarkHandler({useSemicolon: e.target.checked})}\n                    />{charactors.SEMICOLON}\n                    <input type=\"checkbox\"\n                           checked={this.state.useLessThanSign}\n                           onChange={(e) => this.changeMarkHandler({useLessThanSign: e.target.checked})}\n                    />{charactors.LESS_THAN_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useEqualSign}\n                           onChange={(e) => this.changeMarkHandler({useEqualSign: e.target.checked})}\n                    />{charactors.EQUAL_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useGreaterThanSign}\n                           onChange={(e) => this.changeMarkHandler({useGreaterThanSign: e.target.checked})}\n                    />{charactors.GREATER_THAN_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useQuestionMark}\n                           onChange={(e) => this.changeMarkHandler({useQuestionMark: e.target.checked})}\n                    />{charactors.QUESTION_MARK}\n                    <input type=\"checkbox\"\n                           checked={this.state.useCommercialAtSign}\n                           onChange={(e) => this.changeMarkHandler({useCommercialAtSign: e.target.checked})}\n                    />{charactors.COMMERCIAL_AT_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useLeftSquareBracket}\n                           onChange={(e) => this.changeMarkHandler({useLeftSquareBracket: e.target.checked})}\n                    />{charactors.LEFT_SQUARE_BRACKET}\n                    <input type=\"checkbox\"\n                           checked={this.state.useBackslash}\n                           onChange={(e) => this.changeMarkHandler({useBackslash: e.target.checked})}\n                    />{charactors.BACKSLASH}\n                    <input type=\"checkbox\"\n                           checked={this.state.useRightSquareBracket}\n                           onChange={(e) => this.changeMarkHandler({useRightSquareBracket: e.target.checked})}\n                    />{charactors.RIGHT_SQUARE_BRACKET}\n                    <input type=\"checkbox\"\n                           checked={this.state.useSpacingCircumflexAccent}\n                           onChange={(e) => this.changeMarkHandler({useSpacingCircumflexAccent: e.target.checked})}\n                    />{charactors.SPACING_CIRCUMFLEX_ACCENT}\n                    <input type=\"checkbox\"\n                           checked={this.state.useSpacingUnderscore}\n                           onChange={(e) => this.changeMarkHandler({useSpacingUnderscore: e.target.checked})}\n                    />{charactors.SPACING_UNDERSCORE}\n                    <input type=\"checkbox\"\n                           checked={this.state.useSpacingGraveAccent}\n                           onChange={(e) => this.changeMarkHandler({useSpacingGraveAccent: e.target.checked})}\n                    />{charactors.SPACING_GRAVE_ACCENT}\n                    <input type=\"checkbox\"\n                           checked={this.state.useLeftBrace}\n                           onChange={(e) => this.changeMarkHandler({useLeftBrace: e.target.checked})}\n                    />{charactors.LEFT_BRACE}\n                    <input type=\"checkbox\"\n                           checked={this.state.useVerticalBar}\n                           onChange={(e) => this.changeMarkHandler({useVerticalBar: e.target.checked})}\n                    />{charactors.VERTICAL_BAR}\n                    <input type=\"checkbox\"\n                           checked={this.state.useRightBrace}\n                           onChange={(e) => this.changeMarkHandler({useRightBrace: e.target.checked})}\n                    />{charactors.RIGHT_BRACE}\n                    <input type=\"checkbox\"\n                           checked={this.state.useTildeAccent}\n                           onChange={(e) => this.changeMarkHandler({useTildeAccent: e.target.checked})}\n                    />{charactors.TILDE_ACCENT}\n                </div>\n\n                <ul>\n                    {this.state.randstrs.map((randstr: string, i: number) => {\n                        return <li key={i}>{randstr}</li>\n                    })}\n                </ul>\n            </section>\n        )\n    }\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);","export const LOWERS = 'abcdefghijklmnopqrstuvwxyz';\nexport const UPPERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nexport const DIGITS = '0123456789';\n\nexport const EXCLAMATION_MARK = '!';\nexport const DOUBLE_QUOTATION_MARK = '\"';\nexport const NUMBER_SIGN = '#';\nexport const DOLLAR_SIGN = '$';\nexport const PERCENT_SIGN = '%';\nexport const AMPERSAND_SIGN = '&';\nexport const APOSTROPHE = \"'\";\nexport const LEFT_PARENTHESIS = '(';\nexport const RIGHT_PARENTHESIS = ')';\nexport const ASTERISK = '*';\nexport const PLUS_SIGN = '+';\nexport const COMMA = ',';\nexport const MINUS_SIGN = '-';\nexport const PERIOD = '.';\nexport const SLASH = '/';\nexport const COLON = ':';\nexport const SEMICOLON = ';';\nexport const LESS_THAN_SIGN = '<';\nexport const EQUAL_SIGN = '=';\nexport const GREATER_THAN_SIGN = '>';\nexport const QUESTION_MARK = '?';\nexport const COMMERCIAL_AT_SIGN = '@';\nexport const LEFT_SQUARE_BRACKET = '[';\nexport const BACKSLASH = '\\\\';\nexport const RIGHT_SQUARE_BRACKET = ']';\nexport const SPACING_CIRCUMFLEX_ACCENT = '^';\nexport const SPACING_UNDERSCORE = '_';\nexport const SPACING_GRAVE_ACCENT = '`';\nexport const LEFT_BRACE = '{';\nexport const VERTICAL_BAR = '|';\nexport const RIGHT_BRACE = '}';\nexport const TILDE_ACCENT = '~';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}