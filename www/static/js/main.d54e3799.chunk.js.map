{"version":3,"sources":["random.ts","randstr.ts","charactors.ts","appstate.ts","index.tsx"],"names":["UINT_MAX","Random","ints","Uint32Array","window","crypto","getRandomValues","min","max","Math","floor","this","random","choices","randInt","length","divide","r","i","RandomString","state","c","useLowers","useUppers","useDigits","useExclamationMark","useDoubleQuotationMark","useNumberSign","useDollarSign","usePercentSign","useAmpersandSign","useApostrophe","useLeftParenthesis","useRightParenthesis","useAsterisk","usePlusSign","useComma","useMinusSign","usePeriod","useSlash","useColon","useSemicolon","useLessThanSign","useEqualSign","useGreaterThanSign","useQuestionMark","useCommercialAtSign","useLeftSquareBracket","useBackslash","useRightSquareBracket","useSpacingCircumflexAccent","useSpacingUnderscore","useSpacingGraveAccent","useLeftBrace","useVerticalBar","useRightBrace","useTildeAccent","strs","count","push","randStr","DEFAULT_COUNT","DEFAULT_LENGTH","Appstate","useSymbols","hasChanged","randStrings","params","URL","location","href","searchParams","parseInt","get","f","flags","split","map","val","idx","shift","URLSearchParams","set","history","replaceState","toString","App","props","generate","save","setState","checked","value","onChange","e","changeHandler","target","onClick","reset","type","changeMarksHandler","changeMarkHandler","randstr","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d54e3799.chunk.js","sourcesContent":["\nconst UINT_MAX = 2**32;\n\nexport default class Random {\n    // 0.0 <= x < 1.0\n    public static random(): number {\n        let ints = new Uint32Array(1);\n        window.crypto.getRandomValues(ints);\n        return ints[0]/UINT_MAX;\n    }\n\n    public static randInt(min: number, max: number): number {\n        return Math.floor(this.random() * (max - min)) + min;\n    }\n\n    public static randFloat(min: number, max: number): number {\n        return this.random() * (max - min) + min;\n    }\n\n    public static randChoice<T>(choices: T[]): T {\n        return choices[this.randInt(0, choices.length)];\n    }\n\n    public static randChar(choices: string): string {\n        return choices[this.randInt(0, choices.length)];\n    }\n\n    public static randStr(choices: string, length: number): string {\n        let ints = new Uint32Array(length);\n        window.crypto.getRandomValues(ints);\n\n        const divide = UINT_MAX / choices.length;\n\n        let r = '';\n        for (let i = 0; i < length; i++) {\n            r += choices[Math.floor(ints[i] / divide)];\n        }\n        return r;\n    }\n}\n","import * as charactors from './charactors'\nimport {IAppState} from \"./types\";\nimport Random from \"./random\";\n\nexport default class RandomString {\n    public static generate(state: IAppState): string[] {\n        let c = '';\n        if (state.useLowers)\n            c += charactors.LOWERS;\n        if (state.useUppers)\n            c += charactors.UPPERS;\n        if (state.useDigits)\n            c += charactors.DIGITS;\n        if (state.useExclamationMark)\n            c += charactors.EXCLAMATION_MARK;\n        if (state.useDoubleQuotationMark)\n            c += charactors.DOUBLE_QUOTATION_MARK;\n        if (state.useNumberSign)\n            c += charactors.NUMBER_SIGN;\n        if (state.useDollarSign)\n            c += charactors.DOLLAR_SIGN;\n        if (state.usePercentSign)\n            c += charactors.PERCENT_SIGN;\n        if (state.useAmpersandSign)\n            c += charactors.AMPERSAND_SIGN;\n        if (state.useApostrophe)\n            c += charactors.APOSTROPHE;\n        if (state.useLeftParenthesis)\n            c += charactors.LEFT_PARENTHESIS;\n        if (state.useRightParenthesis)\n            c += charactors.RIGHT_PARENTHESIS;\n        if (state.useAsterisk)\n            c += charactors.ASTERISK;\n        if (state.usePlusSign)\n            c += charactors.PLUS_SIGN;\n        if (state.useComma)\n            c += charactors.COMMA;\n        if (state.useMinusSign)\n            c += charactors.MINUS_SIGN;\n        if (state.usePeriod)\n            c += charactors.PERIOD;\n        if (state.useSlash)\n            c += charactors.SLASH;\n        if (state.useColon)\n            c += charactors.COLON;\n        if (state.useSemicolon)\n            c += charactors.SEMICOLON;\n        if (state.useLessThanSign)\n            c += charactors.LESS_THAN_SIGN;\n        if (state.useEqualSign)\n            c += charactors.EQUAL_SIGN;\n        if (state.useGreaterThanSign)\n            c += charactors.GREATER_THAN_SIGN;\n        if (state.useQuestionMark)\n            c += charactors.QUESTION_MARK;\n        if (state.useCommercialAtSign)\n            c += charactors.COMMERCIAL_AT_SIGN;\n        if (state.useLeftSquareBracket)\n            c += charactors.LEFT_SQUARE_BRACKET;\n        if (state.useBackslash)\n            c += charactors.BACKSLASH;\n        if (state.useRightSquareBracket)\n            c += charactors.RIGHT_SQUARE_BRACKET;\n        if (state.useSpacingCircumflexAccent)\n            c += charactors.SPACING_CIRCUMFLEX_ACCENT;\n        if (state.useSpacingUnderscore)\n            c += charactors.SPACING_UNDERSCORE;\n        if (state.useSpacingGraveAccent)\n            c += charactors.SPACING_GRAVE_ACCENT;\n        if (state.useLeftBrace)\n            c += charactors.LEFT_BRACE;\n        if (state.useVerticalBar)\n            c += charactors.VERTICAL_BAR;\n        if (state.useRightBrace)\n            c += charactors.RIGHT_BRACE;\n        if (state.useTildeAccent)\n            c += charactors.TILDE_ACCENT;\n\n        if (!c.length) {\n            return [];\n        }\n\n        let strs: string[] = [];\n        for (let i = 0; i < state.count; i++) {\n            strs.push(Random.randStr(c, state.length));\n        }\n\n        return strs;\n    }\n}","export const LOWERS = 'abcdefghijklmnopqrstuvwxyz';\nexport const UPPERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nexport const DIGITS = '0123456789';\n\nexport const EXCLAMATION_MARK = '!';\nexport const DOUBLE_QUOTATION_MARK = '\"';\nexport const NUMBER_SIGN = '#';\nexport const DOLLAR_SIGN = '$';\nexport const PERCENT_SIGN = '%';\nexport const AMPERSAND_SIGN = '&';\nexport const APOSTROPHE = \"'\";\nexport const LEFT_PARENTHESIS = '(';\nexport const RIGHT_PARENTHESIS = ')';\nexport const ASTERISK = '*';\nexport const PLUS_SIGN = '+';\nexport const COMMA = ',';\nexport const MINUS_SIGN = '-';\nexport const PERIOD = '.';\nexport const SLASH = '/';\nexport const COLON = ':';\nexport const SEMICOLON = ';';\nexport const LESS_THAN_SIGN = '<';\nexport const EQUAL_SIGN = '=';\nexport const GREATER_THAN_SIGN = '>';\nexport const QUESTION_MARK = '?';\nexport const COMMERCIAL_AT_SIGN = '@';\nexport const LEFT_SQUARE_BRACKET = '[';\nexport const BACKSLASH = '\\\\';\nexport const RIGHT_SQUARE_BRACKET = ']';\nexport const SPACING_CIRCUMFLEX_ACCENT = '^';\nexport const SPACING_UNDERSCORE = '_';\nexport const SPACING_GRAVE_ACCENT = '`';\nexport const LEFT_BRACE = '{';\nexport const VERTICAL_BAR = '|';\nexport const RIGHT_BRACE = '}';\nexport const TILDE_ACCENT = '~';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {IAppState} from \"./types\";\n\nconst DEFAULT_COUNT = 12;\nconst DEFAULT_LENGTH = 16;\n\nexport default class Appstate implements IAppState {\n    count: number;\n    length: number;\n\n    useLowers: boolean;\n    useUppers: boolean;\n    useDigits: boolean;\n    useSymbols: boolean;\n    useExclamationMark: boolean;\n    useDoubleQuotationMark: boolean;\n    useNumberSign: boolean;\n    useDollarSign: boolean;\n    usePercentSign: boolean;\n    useAmpersandSign: boolean;\n    useApostrophe: boolean;\n    useLeftParenthesis: boolean;\n    useRightParenthesis: boolean;\n    useAsterisk: boolean;\n    usePlusSign: boolean;\n    useComma: boolean;\n    useMinusSign: boolean;\n    usePeriod: boolean;\n    useSlash: boolean;\n    useColon: boolean;\n    useSemicolon: boolean;\n    useLessThanSign: boolean;\n    useEqualSign: boolean;\n    useGreaterThanSign: boolean;\n    useQuestionMark: boolean;\n    useCommercialAtSign: boolean;\n    useLeftSquareBracket: boolean;\n    useBackslash: boolean;\n    useRightSquareBracket: boolean;\n    useSpacingCircumflexAccent: boolean;\n    useSpacingUnderscore: boolean;\n    useSpacingGraveAccent: boolean;\n    useLeftBrace: boolean;\n    useVerticalBar: boolean;\n    useRightBrace: boolean;\n    useTildeAccent: boolean;\n\n    hasChanged: boolean;\n    randStrings: string[];\n\n    constructor() {\n        const url = new URL(window.location.href);\n        const params = url.searchParams;\n\n        this.count = parseInt(params.get('c') || '') || DEFAULT_COUNT;\n        this.length = parseInt(params.get('l') || '') || DEFAULT_LENGTH;\n\n        const f = params.get('f');\n        const flags: boolean[] = f ? f.split('').map((val: string, idx: number): boolean => {\n            return !!parseInt(val);\n        }) : [];\n\n        this.useLowers = flags.length ? flags.shift() || false : true;\n        this.useUppers = flags.length ? flags.shift() || false : true;\n        this.useDigits = flags.length ? flags.shift() || false : true;\n        this.useSymbols = flags.length ? flags.shift() || false : false;\n        this.useExclamationMark = flags.length ? flags.shift() || false : false;\n        this.useDoubleQuotationMark = flags.length ? flags.shift() || false : false;\n        this.useNumberSign = flags.length ? flags.shift() || false : false;\n        this.useDollarSign = flags.length ? flags.shift() || false : false;\n        this.usePercentSign = flags.length ? flags.shift() || false : false;\n        this.useAmpersandSign = flags.length ? flags.shift() || false : false;\n        this.useApostrophe = flags.length ? flags.shift() || false : false;\n        this.useLeftParenthesis = flags.length ? flags.shift() || false : false;\n        this.useRightParenthesis = flags.length ? flags.shift() || false : false;\n        this.useAsterisk = flags.length ? flags.shift() || false : false;\n        this.usePlusSign = flags.length ? flags.shift() || false : false;\n        this.useComma = flags.length ? flags.shift() || false : false;\n        this.useMinusSign = flags.length ? flags.shift() || false : false;\n        this.usePeriod = flags.length ? flags.shift() || false : false;\n        this.useSlash = flags.length ? flags.shift() || false : false;\n        this.useColon = flags.length ? flags.shift() || false : false;\n        this.useSemicolon = flags.length ? flags.shift() || false : false;\n        this.useLessThanSign = flags.length ? flags.shift() || false : false;\n        this.useEqualSign = flags.length ? flags.shift() || false : false;\n        this.useGreaterThanSign = flags.length ? flags.shift() || false : false;\n        this.useQuestionMark = flags.length ? flags.shift() || false : false;\n        this.useCommercialAtSign = flags.length ? flags.shift() || false : false;\n        this.useLeftSquareBracket = flags.length ? flags.shift() || false : false;\n        this.useBackslash = flags.length ? flags.shift() || false : false;\n        this.useRightSquareBracket = flags.length ? flags.shift() || false : false;\n        this.useSpacingCircumflexAccent = flags.length ? flags.shift() || false : false;\n        this.useSpacingUnderscore = flags.length ? flags.shift() || false : false;\n        this.useSpacingGraveAccent = flags.length ? flags.shift() || false : false;\n        this.useLeftBrace = flags.length ? flags.shift() || false : false;\n        this.useVerticalBar = flags.length ? flags.shift() || false : false;\n        this.useRightBrace = flags.length ? flags.shift() || false : false;\n        this.useTildeAccent = flags.length ? flags.shift() || false : false;\n\n        this.hasChanged = false;\n        this.randStrings = [];\n    }\n\n    public static save(state: IAppState) {\n        const flags = [\n            state.useLowers,\n            state.useUppers,\n            state.useDigits,\n            state.useSymbols,\n            state.useExclamationMark,\n            state.useDoubleQuotationMark,\n            state.useNumberSign,\n            state.useDollarSign,\n            state.usePercentSign,\n            state.useAmpersandSign,\n            state.useApostrophe,\n            state.useLeftParenthesis,\n            state.useRightParenthesis,\n            state.useAsterisk,\n            state.usePlusSign,\n            state.useComma,\n            state.useMinusSign,\n            state.usePeriod,\n            state.useSlash,\n            state.useColon,\n            state.useSemicolon,\n            state.useLessThanSign,\n            state.useEqualSign,\n            state.useGreaterThanSign,\n            state.useQuestionMark,\n            state.useCommercialAtSign,\n            state.useLeftSquareBracket,\n            state.useBackslash,\n            state.useRightSquareBracket,\n            state.useSpacingCircumflexAccent,\n            state.useSpacingUnderscore,\n            state.useSpacingGraveAccent,\n            state.useLeftBrace,\n            state.useVerticalBar,\n            state.useRightBrace,\n            state.useTildeAccent,\n        ];\n        let f = '';\n        for (let i = 0; i < flags.length; i++) {\n            f += flags[i] ? '1' : '0';\n        }\n\n        const params = new URLSearchParams();\n        params.set('c', ''+state.count);\n        params.set('l', ''+state.length);\n        params.set('f', f);\n        window.history.replaceState('', '', '?' + params.toString());\n    }\n\n}","import React, {ReactNode} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as charactors from \"./charactors\";\nimport {IAppProps, IAppState} from \"./types\";\nimport RandomString from \"./randstr\";\nimport Appstate from \"./appstate\";\n\nclass App extends React.Component<IAppProps, IAppState> {\n    constructor(props: IAppProps) {\n        super(props);\n        this.state = new Appstate();\n    }\n\n    componentDidMount() {\n        this.generate();\n    }\n\n    generate() {\n        if (this.state.hasChanged) {\n            Appstate.save(this.state);\n        }\n        this.setState({randStrings: RandomString.generate(this.state)});\n    }\n\n    reset() {\n        window.history.replaceState('', '', '/');\n        this.setState(new Appstate());\n    }\n\n    changeHandler(state: object) {\n        state = {...state, ...{hasChanged: true}};\n        this.setState(state, () => this.generate());\n    }\n\n    changeMarksHandler(checked: boolean) {\n        this.setState({\n            useSymbols: checked,\n            useExclamationMark: checked,\n            useDoubleQuotationMark: checked,\n            useNumberSign: checked,\n            useDollarSign: checked,\n            usePercentSign: checked,\n            useAmpersandSign: checked,\n            useApostrophe: checked,\n            useLeftParenthesis: checked,\n            useRightParenthesis: checked,\n            useAsterisk: checked,\n            usePlusSign: checked,\n            useComma: checked,\n            useMinusSign: checked,\n            usePeriod: checked,\n            useSlash: checked,\n            useColon: checked,\n            useSemicolon: checked,\n            useLessThanSign: checked,\n            useEqualSign: checked,\n            useGreaterThanSign: checked,\n            useQuestionMark: checked,\n            useCommercialAtSign: checked,\n            useLeftSquareBracket: checked,\n            useBackslash: checked,\n            useRightSquareBracket: checked,\n            useSpacingCircumflexAccent: checked,\n            useSpacingUnderscore: checked,\n            useSpacingGraveAccent: checked,\n            useLeftBrace: checked,\n            useVerticalBar: checked,\n            useRightBrace: checked,\n            useTildeAccent: checked,\n            hasChanged: true,\n        }, () => {\n            this.generate();\n        })\n    }\n\n    changeMarkHandler(state: object) {\n        state = {...state, ...{hasChanged: true}};\n        this.setState(state, () => {\n            if (\n                this.state.useExclamationMark === this.state.useDoubleQuotationMark &&\n                this.state.useExclamationMark === this.state.useNumberSign &&\n                this.state.useExclamationMark === this.state.useDollarSign &&\n                this.state.useExclamationMark === this.state.usePercentSign &&\n                this.state.useExclamationMark === this.state.useAmpersandSign &&\n                this.state.useExclamationMark === this.state.useApostrophe &&\n                this.state.useExclamationMark === this.state.useLeftParenthesis &&\n                this.state.useExclamationMark === this.state.useRightParenthesis &&\n                this.state.useExclamationMark === this.state.useAsterisk &&\n                this.state.useExclamationMark === this.state.usePlusSign &&\n                this.state.useExclamationMark === this.state.useComma &&\n                this.state.useExclamationMark === this.state.useMinusSign &&\n                this.state.useExclamationMark === this.state.usePeriod &&\n                this.state.useExclamationMark === this.state.useSlash &&\n                this.state.useExclamationMark === this.state.useColon &&\n                this.state.useExclamationMark === this.state.useSemicolon &&\n                this.state.useExclamationMark === this.state.useLessThanSign &&\n                this.state.useExclamationMark === this.state.useEqualSign &&\n                this.state.useExclamationMark === this.state.useGreaterThanSign &&\n                this.state.useExclamationMark === this.state.useQuestionMark &&\n                this.state.useExclamationMark === this.state.useCommercialAtSign &&\n                this.state.useExclamationMark === this.state.useLeftSquareBracket &&\n                this.state.useExclamationMark === this.state.useBackslash &&\n                this.state.useExclamationMark === this.state.useRightSquareBracket &&\n                this.state.useExclamationMark === this.state.useSpacingCircumflexAccent &&\n                this.state.useExclamationMark === this.state.useSpacingUnderscore &&\n                this.state.useExclamationMark === this.state.useSpacingGraveAccent &&\n                this.state.useExclamationMark === this.state.useLeftBrace &&\n                this.state.useExclamationMark === this.state.useVerticalBar &&\n                this.state.useExclamationMark === this.state.useRightBrace &&\n                this.state.useExclamationMark === this.state.useTildeAccent) {\n\n                this.setState({useSymbols: this.state.useExclamationMark}, () => this.generate());\n            } else {\n                this.generate();\n            }\n        });\n    }\n\n    render(): ReactNode {\n        return (\n            <section>\n                <h1>Random Strings</h1>\n                <div>\n                    count:<input value={this.state.count}\n                                onChange={(e) => this.changeHandler({count: parseInt(e.target.value) || 0})}/><br/>\n                    length:<input value={this.state.length}\n                           onChange={(e) => this.changeHandler({length: parseInt(e.target.value) || 0})} />\n                    <button onClick={() => this.generate()}>Generate</button>\n                    <button onClick={() => this.reset()}>Reset</button>\n                </div>\n                <div>\n                    <input type=\"checkbox\"\n                           checked={this.state.useLowers}\n                           onChange={(e) => this.changeHandler({useLowers: e.target.checked})}\n                    />a-z\n                    <input type=\"checkbox\"\n                           checked={this.state.useUppers}\n                           onChange={(e) => this.changeHandler({useUppers: e.target.checked})}\n                    />A-Z\n                    <input type=\"checkbox\"\n                           checked={this.state.useDigits}\n                           onChange={(e) => this.changeHandler({useDigits: e.target.checked})}\n                    />0-9\n                    <input type=\"checkbox\"\n                           checked={this.state.useSymbols}\n                           onChange={(e) => this.changeMarksHandler(e.target.checked)}\n                    />symbols\n                </div>\n                <div>\n                    <input type=\"checkbox\"\n                           checked={this.state.useExclamationMark}\n                           onChange={(e) => this.changeMarkHandler({useExclamationMark: e.target.checked})}\n                    />{charactors.EXCLAMATION_MARK}\n                    <input type=\"checkbox\"\n                           checked={this.state.useDoubleQuotationMark}\n                           onChange={(e) => this.changeMarkHandler({useDoubleQuotationMark: e.target.checked})}\n                    />{charactors.DOUBLE_QUOTATION_MARK}\n                    <input type=\"checkbox\"\n                           checked={this.state.useNumberSign}\n                           onChange={(e) => this.changeMarkHandler({useNumberSign: e.target.checked})}\n                    />{charactors.NUMBER_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useDollarSign}\n                           onChange={(e) => this.changeMarkHandler({useDollarSign: e.target.checked})}\n                    />{charactors.DOLLAR_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.usePercentSign}\n                           onChange={(e) => this.changeMarkHandler({usePercentSign: e.target.checked})}\n                    />{charactors.PERCENT_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useAmpersandSign}\n                           onChange={(e) => this.changeMarkHandler({useAmpersandSign: e.target.checked})}\n                    />{charactors.AMPERSAND_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useApostrophe}\n                           onChange={(e) => this.changeMarkHandler({useApostrophe: e.target.checked})}\n                    />{charactors.APOSTROPHE}\n                    <input type=\"checkbox\"\n                           checked={this.state.useLeftParenthesis}\n                           onChange={(e) => this.changeMarkHandler({useLeftParenthesis: e.target.checked})}\n                    />{charactors.LEFT_PARENTHESIS}\n                    <input type=\"checkbox\"\n                           checked={this.state.useRightParenthesis}\n                           onChange={(e) => this.changeMarkHandler({useRightParenthesis: e.target.checked})}\n                    />{charactors.RIGHT_PARENTHESIS}\n                    <input type=\"checkbox\"\n                           checked={this.state.useAsterisk}\n                           onChange={(e) => this.changeMarkHandler({useAsterisk: e.target.checked})}\n                    />{charactors.ASTERISK}\n                    <input type=\"checkbox\"\n                           checked={this.state.usePlusSign}\n                           onChange={(e) => this.changeMarkHandler({usePlusSign: e.target.checked})}\n                    />{charactors.PLUS_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useComma}\n                           onChange={(e) => this.changeMarkHandler({useComma: e.target.checked})}\n                    />{charactors.COMMA}\n                    <input type=\"checkbox\"\n                           checked={this.state.useMinusSign}\n                           onChange={(e) => this.changeMarkHandler({useMinusSign: e.target.checked})}\n                    />{charactors.MINUS_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.usePeriod}\n                           onChange={(e) => this.changeMarkHandler({usePeriod: e.target.checked})}\n                    />{charactors.PERIOD}\n                    <input type=\"checkbox\"\n                           checked={this.state.useSlash}\n                           onChange={(e) => this.changeMarkHandler({useSlash: e.target.checked})}\n                    />{charactors.SLASH}\n                </div>\n                <div>\n                    <input type=\"checkbox\"\n                           checked={this.state.useColon}\n                           onChange={(e) => this.changeMarkHandler({useColon: e.target.checked})}\n                    />{charactors.COLON}\n                    <input type=\"checkbox\"\n                           checked={this.state.useSemicolon}\n                           onChange={(e) => this.changeMarkHandler({useSemicolon: e.target.checked})}\n                    />{charactors.SEMICOLON}\n                    <input type=\"checkbox\"\n                           checked={this.state.useLessThanSign}\n                           onChange={(e) => this.changeMarkHandler({useLessThanSign: e.target.checked})}\n                    />{charactors.LESS_THAN_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useEqualSign}\n                           onChange={(e) => this.changeMarkHandler({useEqualSign: e.target.checked})}\n                    />{charactors.EQUAL_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useGreaterThanSign}\n                           onChange={(e) => this.changeMarkHandler({useGreaterThanSign: e.target.checked})}\n                    />{charactors.GREATER_THAN_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useQuestionMark}\n                           onChange={(e) => this.changeMarkHandler({useQuestionMark: e.target.checked})}\n                    />{charactors.QUESTION_MARK}\n                    <input type=\"checkbox\"\n                           checked={this.state.useCommercialAtSign}\n                           onChange={(e) => this.changeMarkHandler({useCommercialAtSign: e.target.checked})}\n                    />{charactors.COMMERCIAL_AT_SIGN}\n                    <input type=\"checkbox\"\n                           checked={this.state.useLeftSquareBracket}\n                           onChange={(e) => this.changeMarkHandler({useLeftSquareBracket: e.target.checked})}\n                    />{charactors.LEFT_SQUARE_BRACKET}\n                    <input type=\"checkbox\"\n                           checked={this.state.useBackslash}\n                           onChange={(e) => this.changeMarkHandler({useBackslash: e.target.checked})}\n                    />{charactors.BACKSLASH}\n                    <input type=\"checkbox\"\n                           checked={this.state.useRightSquareBracket}\n                           onChange={(e) => this.changeMarkHandler({useRightSquareBracket: e.target.checked})}\n                    />{charactors.RIGHT_SQUARE_BRACKET}\n                    <input type=\"checkbox\"\n                           checked={this.state.useSpacingCircumflexAccent}\n                           onChange={(e) => this.changeMarkHandler({useSpacingCircumflexAccent: e.target.checked})}\n                    />{charactors.SPACING_CIRCUMFLEX_ACCENT}\n                    <input type=\"checkbox\"\n                           checked={this.state.useSpacingUnderscore}\n                           onChange={(e) => this.changeMarkHandler({useSpacingUnderscore: e.target.checked})}\n                    />{charactors.SPACING_UNDERSCORE}\n                    <input type=\"checkbox\"\n                           checked={this.state.useSpacingGraveAccent}\n                           onChange={(e) => this.changeMarkHandler({useSpacingGraveAccent: e.target.checked})}\n                    />{charactors.SPACING_GRAVE_ACCENT}\n                    <input type=\"checkbox\"\n                           checked={this.state.useLeftBrace}\n                           onChange={(e) => this.changeMarkHandler({useLeftBrace: e.target.checked})}\n                    />{charactors.LEFT_BRACE}\n                    <input type=\"checkbox\"\n                           checked={this.state.useVerticalBar}\n                           onChange={(e) => this.changeMarkHandler({useVerticalBar: e.target.checked})}\n                    />{charactors.VERTICAL_BAR}\n                    <input type=\"checkbox\"\n                           checked={this.state.useRightBrace}\n                           onChange={(e) => this.changeMarkHandler({useRightBrace: e.target.checked})}\n                    />{charactors.RIGHT_BRACE}\n                    <input type=\"checkbox\"\n                           checked={this.state.useTildeAccent}\n                           onChange={(e) => this.changeMarkHandler({useTildeAccent: e.target.checked})}\n                    />{charactors.TILDE_ACCENT}\n                </div>\n\n                <ul>\n                    {this.state.randStrings.map((randstr: string, i: number) => {\n                        return <li key={i}>{randstr}</li>\n                    })}\n                </ul>\n            </section>\n        )\n    }\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}